# Configure and Deploy Telegram Bot
- name: Configure and Deploy Telegram Bot
  hosts: bot_master,slave  # Применяется к хостам bot_master и slave
  become: true

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 86400
      become: yes

    # Установка Git
    - name: Install Git
      apt:
        name: git
        state: present

    # Клонирование репозитория Telegram бота
    - name: Clone Telegram bot repository
      git:
        repo: "{{ myhosts.vars.GIT_URL }}"
        dest: "{{ myhosts.vars.WORKDIR }}"
        force: yes

    # Установка Python и Python pip
    - name: Install Python and Python pip
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present

    # Установка Python зависимостей
    - name: installing pip packages
      pip:
        requirements: "{{ myhosts.vars.WORKDIR }}/requirements.txt"


# Deploy PostgreSQL and Configure Replication
- name: Deploy PostgreSQL and Configure Replication
  hosts: bot_master  # Применяется к хосту master
  become: true  # Использовать привилегии суперпользователя

  tasks:
  
    # Установка PostgreSQL и его компонентов
    - name: Install PostgreSQL
      apt:
        name:
          - postgresql-14
          - postgresql-contrib
        state: present
        update_cache: true
      register: postgres_install_result  # Сохраняем результат установки

    # Проверка статуса установки PostgreSQL
    - name: Check PostgreSQL installation status
      fail:
        msg: "Failed to install PostgreSQL"
      when: postgres_install_result.failed  # Запускается только при неудачной установке
 
    # Настройка PostgreSQL для репликации
    - name: Configure PostgreSQL for replication
      become_user: "{{ myhosts.vars.DB_USER }}"
      blockinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        block: |
          listen_addresses = '*'
          port = {{ myhosts.vars.DB_PORT }}
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders=10
          wal_level=replica
          wal_log_hints = on
          hot_standby=on
          max_replication_slots=10
          hot_standby_feedback=on
          log_replication_commands=on

    # Создание директории для архивов WAL
    - name: Create oracle/pg_data/archive directory
      file:
        path: /oracle/pg_data/archive
        state: directory

    - name: pg_hba.conf master configuration
      blockinfile:
        path: "/etc/postgresql/14/main/pg_hba.conf"
        block: |
          local all {{ myhosts.vars.DB_USER}} peer
          host replication all {{ myhosts.vars.DB_REPL_HOST }}/24 scram-sha-256
          host all all {{ myhosts.vars.DB_HOST }}/32 trust

    # Изменение владельца директории
    - name: Chown oracle directory
      file:
        path: /oracle/pg_data/archive/
        owner: "{{ myhosts.vars.DB_USER }}"
        group: "{{ myhosts.vars.DB_USER }}"
        recurse: true

    # Перезапуск PostgreSQL
    - name: Restart PostgreSQL
      systemd:
        name: postgresql
        state: restarted

    - name: create new user
      command: psql -c "ALTER ROLE postgres PASSWORD '{{ myhosts.vars.DB_REPL_PASSWORD }}';"
      become: true
      become_user: "{{ myhosts.vars.DB_USER }}"

    - name: copying init.sql
      copy:
        src: init.sql
        dest: /tmp/init.sql

    - name: change of rights
      file:
        path: /tmp/init.sql
        owner: "{{ myhosts.vars.DB_USER }}"
        group: "{{ myhosts.vars.DB_USER }}"
        mode: '0644'

    - name: db init
      replace:
        path: /tmp/init.sql
        regexp: "DB_DATABASE"
        replace: "{{ myhosts.vars.DB_DATABASE }}"

    - name: user init
      replace:
        path: /tmp/init.sql
        regexp: "DB_USER"
        replace: "{{ myhosts.vars.DB_USER }}"

    - name: repl user init
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_USER"
        replace: "{{ myhosts.vars.DB_REPL_USER }}"

    - name: repl password init
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_PASSWORD"
        replace: "{{ myhosts.vars.DB_REPL_PASSWORD }}"

    - name: run init.sql
      command: /usr/bin/psql -a -f /tmp/init.sql
      become: true
      become_user: "{{ myhosts.vars.DB_USER }}"



# Configure PostgreSQL Slave
- name: Configure PostgreSQL Slave
  hosts: slave  # Применяется к хосту slave
  become: true

  tasks:
    # Установка Git
    - name: Install Git
      apt:
        name: git
        state: present

    # Установка Python и Python pip
    - name: Install Python and Python pip
      apt:
        name:
          - python3
          - python3-pip
        state: present

    # Клонирование репозитория Telegram бота
    - name: Clone Telegram bot repository
      git:
        repo: "{{ myhosts.vars.GIT_URL }}"
        dest: '{{ myhosts.vars.WORKDIR }}'
        force: true

    # Установка Python зависимостей
    - name: installing pip packages
      pip:
        requirements: "{{ myhosts.vars.WORKDIR }}/requirements.txt"

    # Установка PostgreSQL и его компонентов
    - name: Install PostgreSQL
      apt:
        name:
          - postgresql-14
          - postgresql-contrib
        state: present
        update_cache: true

    # Настройка PostgreSQL для репликации
    - name: Configure PostgreSQL for replication
      become_user: postgres
      lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: "^#listen_addresses ="
        line: "listen_addresses = '*'"

    # Остановка PostgreSQL
    - name: Stop PostgreSQL
      systemd:
        name: postgresql
        state: stopped

    - name: deleting databases
      command: rm -rf /var/lib/postgresql/14/main/
      become: true
      become_user: "{{ myhosts.vars.DB_USER }}"

    - name: performing replication
      command: pg_basebackup -h {{ myhosts.vars.DB_HOST }} -D /var/lib/postgresql/14/main/ -p {{ myhosts.vars.DB_PORT }} -U {{ myhosts.vars.DB_REPL_USER }} -vP -w
      become: true
      become_user: "{{ myhosts.vars.DB_USER }}"
      environment:
        PGPASSWORD: "{{ myhosts.vars.DB_REPL_PASSWORD }}"

    - name: change of rights
      command: chown -R postgres:postgres /var/lib/postgresql/
      become: true
      become_user: "{{ myhosts.vars.DB_USER }}"

    - name: Start PostgreSQL
      systemd:
        name: postgresql
        state: started

- name: bot Playbook
  hosts: bot_master
  become: yes
  tasks:
    - name: Installing Python packages
      pip:                
        name:
          - python-telegram-bot==13.7
          - paramiko
          - psycopg2-binary
          - python-dotenv
      become: yes

    - name: Run Bot
      ansible.builtin.command:
        cmd: python3 {{ myhosts.vars.WORKDIR }}/bot.py
      environment:
        TOKEN: "{{ myhosts.vars.TOKEN }}"
        DB_HOST: "{{ myhosts.vars.DB_HOST }}"
        DB_USER: "{{ myhosts.vars.DB_USER }}"
        DB_PASSWORD: "{{ myhosts.vars.DB_PASSWORD }}"
        DB_DATABASE: "{{ myhosts.vars.DB_DATABASE }}"
        RM_HOST: "{{ myhosts.vars.RM_HOST }}"
        RM_PORT: "{{ myhosts.vars.RM_PORT }}"
        RM_USER: "{{ myhosts.vars.RM_USER }}"
        RM_PASSWORD: "{{ myhosts.vars.RM_PASSWORD }}"